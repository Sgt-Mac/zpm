#!/usr/bin/env python
#  Copyright 2014 Rackspace, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
import argparse
import os
import sys

from os import path
# TODO(LB): This is a hack to make imports work, and should be replaced
# with something proper
sys.path.insert(0, path.abspath(path.dirname(path.dirname(__file__))))
from zpm import zpm


class NewAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values is None:
            # no working dir specified, use default
            location = namespace.new
        else:
            location = values
        zpm.create_project(location)
        print('Created new project in "%s"' % location)


class BundleAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values is None:
            # no working dir specified, use default
            zpm.bundle_project(namespace.bundle)
        else:
            zpm.bundle_project(values)


def set_up_arg_parser():
    parser = argparse.ArgumentParser(description='ZeroVM Package Manager')
    parser.add_argument(
        '--new',
        '-n',
        help='Create a new ZeroVM application workspace',
        action=NewAction,
        metavar='WORKING_DIR',
        nargs='?',
        default=os.getcwd(),
    )
    parser.add_argument(
        '--bundle',
        '-b',
        help='Bundle a ZeroVM application',
        action=BundleAction,
        metavar='WORKING_DIR',
        nargs='?',
        default=os.getcwd(),
    )
    return parser


if __name__ == "__main__":
    arg_parser = set_up_arg_parser()
    arg_parser.parse_args()
